#include <stdio.h>
#include <stdlib.h>

typedef struct node {
    int data;
    struct node *next;
} a;

a* create(int data1) {
    a* newnode = (a*)malloc(sizeof(a));
    newnode->data = data1;
    newnode->next = NULL;
    return newnode;
}

int count(a* head) {
    int c = 0;
    a* temp = head;
    while (temp != NULL) {
        c++;
        temp = temp->next;
    }
    return c;
}

void addBegin(a** head, int data1) {
    a* newnode = create(data1);
    newnode->next = *head;
    *head = newnode;
}

void addEnd(a** head, int data1) {
    a* newnode = create(data1);
    if (*head == NULL) {
        *head = newnode;
    } else {
        a* temp = *head;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newnode;
    }
}

void addSpecific(a** head, int data1, int nodenum) {
    a* newnode = create(data1);
    if (nodenum == 0) {
        addBegin(head, data1);
        return;
    }

    a* temp = *head;
    int c = 0;

    while (temp != NULL && c < nodenum - 1) {
        temp = temp->next;
        c++;
    }

    if (temp == NULL) {
        printf("Invalid position.\n");
    } else {
        newnode->next = temp->next;
        temp->next = newnode;
    }
}


void delbegin(a** head) {
    a* temp = *head;
    if (temp != NULL) {
        *head = temp->next;  
        free(temp);
    } else {
        printf("The linked list is already empty.\n");
    }
}


void delend(a** head) {
    if (*head == NULL) {
        printf("The linked list is already empty.\n");
        return;
    }

    a* temp = *head;
    
    if (temp->next == NULL) {
        free(temp);
        *head = NULL;
        return;
    }


    while (temp->next != NULL && temp->next->next != NULL) {
        temp = temp->next;
    }

    
    free(temp->next);
    temp->next = NULL;
}

void delspecific(a** head, int s) {
    a* temp = *head;
    int k = count(temp);
    
    if (s == 1) {
        delbegin(head);  // Pass &head to delbegin
        return;
    } else if (s == k) {
        delend(head);  // Pass &head to delend
        return;
    } else {
        int i = 1;
        while (temp != NULL && i < s - 1) {
            temp = temp->next;
            i++;
        }

        if (temp == NULL || temp->next == NULL) {
            printf("Invalid position.\n");
            return;
        }

        a* temp2 = temp->next;
        temp->next = temp2->next;
        free(temp2);
    }
}

void printList(a* head) {
    if (head == NULL) {
        printf("The list is empty.\n");
        return;
    }

    while (head != NULL) {
        printf("%d-> ", head->data);
        head = head->next;
    }
    printf("\n");
}
void circular(a* head)
{
    if (head == NULL) {
        printf("The list is empty.\n");
        return;
    }
    a* temp=head;
    while (temp->next!= NULL) {
    
        temp = temp->next;
    }
    temp->next=head;
}

int main() {
    a* head = NULL;
    int n = -1;

    printf("Use these guidelines to create a linked list\n");
    printf("Insert at\n");
    printf("Begin: enter 1\nLast: enter 2\nSpecific position: enter 3\n");
    printf("Delete at\n");
    printf("Begin: enter 4\nLast: enter 5\nSpecific position: enter 6\n");
    printf("Enter 0 to terminate\n");

    while (n != 0) {
        int b;
        printf("Enter your option: ");
        scanf("%d", &b);

        switch (b) {
            case 1: {
                int data;
                printf("Enter value to be inserted at the beginning: ");
                scanf("%d", &data);
                addBegin(&head, data);
                break;
            }
            case 2: {
                int data;
                printf("Enter value to be inserted at the end: ");
                scanf("%d", &data);
                addEnd(&head, data);
                break;
            }
            case 3: {
                int data, pos;
                printf("Enter value to be inserted: ");
                scanf("%d", &data);
                int k = count(head);
                printf("Choose position from 0 to %d: ", k);
                scanf("%d", &pos);
                if (pos >= 0 && pos <= k) {
                    addSpecific(&head, data, pos);
                } else {
                    printf("Invalid position.\n");
                }
                break;
            }
            case 4: {
                delbegin(&head);
                break;
            }
            case 5: {
                delend(&head);
                break;
            }
            case 6:
            {    int k=count(head);
                 int a;
                printf("enter which to be deleted from 1 to %d ",k);
                scanf("%d",&a);
                delspecific(&head,a);
            }
            case 0:
                break;
            default:
                printf("Invalid option.\n");
        }

        printf("Current list: ");
        printList(head);

        n = b;
    }
   circular(head);
   printList(head);
    return 0;
}
