#include <stdio.h>
#include <stdlib.h>
#define MAX_SIZE 10
typedef struct s
{
    int arr[MAX_SIZE];
    int top;
}b;
void initialize (b* stack)
{
    stack->top=-1;
}
void push(b* stack,int data)
{
     if(stack->top==(MAX_SIZE)-1)
     {
         printf("stack limit exceeded\n");
     }
     else
     {
        stack->arr[++(stack->top)]=data;
     }
}
int  pop(b* stack)
{
    if(stack->top==-1)
     {
         printf(" stack is empty\n");
        return 0;
     }
     else
     {
        return (stack->arr[(stack->top)--]);
     }
}
void peek(b* stack)
{
    if(stack->top==-1)
     {
         printf(" stack is empty\n");
     }
     else
     {
       printf("top element is %d\n", stack->arr[(stack->top)]);
     }
}
void isFull(b* stack)
{
     if(stack->top==MAX_SIZE-1)
     {
         printf("stack is full\n");
     }
     else
     {
        printf("stack is not full\n");
     }
}
void isEmpty(b* stack)
{
    if(stack->top!=-1)
     {
         printf("stack is not empty\n");
     }
     else
     {
        printf("stack is empty\n");
     }
}
int main()
{   
    int n=0,c;
    b stack;
    initialize(&stack);
    printf("stack can maximum hold 10 values");
    printf("\n if you want to do any operation on stack select the following\n");
    printf("1-push\n2-pop\n3-peek\n4-isfull\n5-isempty\n 0 to exit\n");
    while(1)
    {  
        printf("enter your choice:");
        scanf("%d",&c);
        
        switch(c)
        {
            case 1:
            {
                int a;
                printf("enter element to be added\n");
                scanf("%d",&a);
                push(&stack,a);
                break;
            }
             case 2:
            {
                
               n= pop(&stack);
               printf("removed element is %d\n",n);
                break;
            }
             case 3:
            {
                
                peek(&stack);
                break;
            }
             case 4:
            {
                
                isFull(&stack);
                break;
            }
             case 5:
            {
                
                isEmpty(&stack);
                break;
            }
            case 0:
            {
                break;
            }
        }
        if(c==0)
        {
            break;
        }
    }

}
