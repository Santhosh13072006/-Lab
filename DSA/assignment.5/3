#include <stdio.h>
#include <stdlib.h>
#define MAX_SIZE 10
typedef struct s
{
    struct s *next;
    int top;
}a;
int count(a** stack)
{
    a* temp=*stack;
    int c=0;
    while(temp!=NULL)
    {
        temp=temp->next;
        c=c+1;
    }
    return c;
}
a* create(int data )
{
    a* newnode=(a*)malloc(sizeof(a));
    newnode->top=data;
    newnode->next=NULL;
}
void push(a** stack,int data)
{
    int k=count(stack);
     if(k==(MAX_SIZE))
     {
         printf("stack limit exceeded\n");
         return;
     }
     else
     {
        a* newelement=create(data);
        newelement->next=*stack;
        *stack=newelement;
     }
}
int  pop(a** stack)
{
    int k=count(stack);
    if(k==0)
     {
         printf(" stack is empty\n");
        return 0;
     }
     else
     {
         a* temp=*stack;
         int c=temp->top;
         *stack=temp->next;
        return c;
     }
}
void peek(a** stack)
{
    int k=count(stack);
    if(k==0)
     {
         printf(" stack is empty\n");

     }
     else
     {
         a* temp=* stack;
       printf("top element is %d\n", temp->top);
     }
}
void isFull(a** stack)
{
     int k=count(stack);
    if(k==10)
     {
         printf(" stack is full\n");
        
     }
     else
     {
        printf("stack is not full\n");
     }
}
void isEmpty(a** stack)
{
    int k=count(stack);
    if(k==0)
     {
         printf(" stack is empty\n");
        
     }
     else
     {
        printf("stack is empty\n");
     }
}
int main()
{   
    int n=0,c;
    a* stack=NULL;
    
    printf("stack can maximum hold 10 values");
    printf("\n if you want to do any operation on stack select the following\n");
    printf("1-push\n2-pop\n3-peek\n4-isfull\n5-isempty\n 0 to exit\n");
    while(1)
    {  
        printf("enter your choice:");
        scanf("%d",&c);
        
        switch(c)
        {
            case 1:
            {
                int b;
                printf("enter element to be added\n");
                scanf("%d",&b);
                push(&stack,b);
                break;
            }
             case 2:
            {
                
               n= pop(&stack);
               printf("removed element is %d\n",n);
                break;
            }
             case 3:
            {
                
                peek(&stack);
                break;
            }
             case 4:
            {
                
                isFull(&stack);
                break;
            }
             case 5:
            {
                
                isEmpty(&stack);
                break;
            }
            case 0:
            {
                break;
            }
        }
        if(c==0)
        {
            break;
        }
    }

}
